//WAP to create point 
#include<GL/glut.h>
#include<iostream>
using namespace std;
void init()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 1000);
	glutInitWindowPosition(1000, 100);
	glutCreateWindow("Empty Window");
}

void display()
{
	glClearColor(1.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1000, 0.0, 1000);
	glPointSize(10);

		glBegin(GL_POINTS);
		{
			glColor3f(0.0, 0.0, 1.0);
			glVertex2f(100, 200);
		}
		glEnd();

	glFlush();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}

//DDA
 #include<GL/glut.h>
#include<iostream>
using namespace std;
void init()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 1000);
	glutInitWindowPosition(1000, 100);
	glutCreateWindow("Empty Window");
}

void display()
{
	glClearColor(1.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1000, 0.0, 1000);
	glPointSize(10);
	int x1 = 100, y1 = 100, x2 = 200, y2 = 200;
	int dx = x2 - x1;
	int dy = y2 - y1;
	int steps;
	if (abs(dx) >= abs(dy))
	{
		steps = abs(dx);
	}
	else {
		steps = abs(dy);
	}
	float x = 100, y = 100;
	float x_inc = float(dx / steps);
	float y_inc = float(dy / steps);
	for (int i = 1; i <= steps; i++)
	{
		glBegin(GL_POINTS);
		{
			glColor3f(0.0, 0.0, 1.0);
			glVertex2f(x, y);
		}
		glEnd();
		x += x_inc;
		y += y_inc;
	}
	glFlush();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}

//Bresenham Line
 #include<GL/glut.h>
#include<iostream>
using namespace std;
void init()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 1000);
	glutInitWindowPosition(1000, 100);
	glutCreateWindow("Empty Window");
}

void display()
{
	glClearColor(1.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1000, 0.0, 1000);
	glPointSize(10);
	int x1 = 100, y1 = 100, x2 = 200, y2 = 200;
	int dx = x2 - x1;
	int dy = y2 - y1;
	int x = x1, y = y1;
	int p = 2 * dy - dx;
	while (x <= x2)
	{   
		glBegin(GL_POINTS);
		{
			glColor3f(0.0, 0.0, 1.0);
			glVertex2f(x, y);
		}
		glEnd();
		if (p < 0)
		{
			x++;
			p += 2 * dy;
		}
		else {
			x++;
			y--;
			p+=2*(dy-dx);
		}
	}
	glFlush();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}

//Bresenham Circle
#include<GL/glut.h>
#include<iostream>
using namespace std;
void init()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 1000);
	glutInitWindowPosition(1000, 100);
	glutCreateWindow("Empty Window");
}

void display()
{
	glClearColor(1.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1000, 0.0, 1000);
	glPointSize(10);
	int h = 300, k = 300, r = 200;
	int x = 0, y = r;
	int p = 3- 2*r;
	while (x <= y)
	{   
		glBegin(GL_POINTS);
		{
			glColor3f(0.0, 0.0, 1.0);
			glVertex2f(x+h, y+k);
			glVertex2f(-x + h, y + k);
			glVertex2f(x + h, -y + k);
			glVertex2f(-x + h, -y + k);
			glVertex2f(y + h, x + k);
			glVertex2f(-y + h, x + k);
			glVertex2f(y + h, -x + k);
			glVertex2f(-y + h, -x + k);
		}
		glEnd();
		if (p < 0)
		{
			x++;
			p += 4* x + 6;
		}
		else {
			x++;
			y--;
			p += 4* (x-y)+10;
		}
	}
	glFlush();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}

//midpoint circle
#include<GL/glut.h>
#include<iostream>
using namespace std;
void init()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 1000);
	glutInitWindowPosition(1000, 100);
	glutCreateWindow("Empty Window");
}

void display()
{
	glClearColor(1.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1000, 0.0, 1000);
	glPointSize(10);
	int h = 300, k = 300, r = 200;
	int x = 0, y = r;
	int p = 1- r;
	while (x <= y)
	{   
		glBegin(GL_POINTS);
		{
			glColor3f(0.0, 0.0, 1.0);
			glVertex2f(x+h, y+k);
			glVertex2f(-x + h, y + k);
			glVertex2f(x + h, -y + k);
			glVertex2f(-x + h, -y + k);
			glVertex2f(y + h, x + k);
			glVertex2f(-y + h, x + k);
			glVertex2f(y + h, -x + k);
			glVertex2f(-y + h, -x + k);
		}
		glEnd();
		if (p < 0)
		{
			x++;
			p += 2* x + 3;
		}
		else {
			x++;
			y--;
			p += 2* (x-y)+5;
		}
	}
	glFlush();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
//ellipse midpoint 
#include <GL/glut.h>
#include <iostream>
using namespace std;

// Initialize OpenGL
void init() {
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Midpoint Ellipse Drawing Algorithm in OpenGL");
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-100.0, 100.0, -100.0, 100.0);
}

// Draw the ellipse using the midpoint algorithm
void drawEllipse(int a, int b) {
    int x = 0, y = b;
    float d1 = b * b - a * a * b + a * a / 4.0;
    glPointSize(2.0);

    glBegin(GL_POINTS);
    while (a * a * (y - 0.5) > b * b * (x + 1)) {
        if (d1 < 0) {
            d1 += b * b * (2 * x + 3);
        }
        else {
            d1 += b * b * (2 * x + 3) + a * a * (-2 * y + 2);
            y--;
        }
        x++;
        glVertex2i(x, y);
        glVertex2i(-x, y);
        glVertex2i(x, -y);
        glVertex2i(-x, -y);
    }

    float d2 = b * b * (x + 0.5) * (x + 0.5) + a * a * (y - 1) * (y - 1) - a * a * b * b;
    while (y > 0) {
        if (d2 < 0) {
            d2 += b * b * (2 * x + 2) + a * a * (-2 * y + 3);
            x++;
        }
        else {
            d2 += a * a * (-2 * y + 3);
        }
        y--;
        glVertex2i(x, y);
        glVertex2i(-x, y);
        glVertex2i(x, -y);
        glVertex2i(-x, -y);
    }
    glEnd();
}

// Display the ellipse
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);
    drawEllipse(60, 30);
    glFlush();
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

